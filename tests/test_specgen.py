import pytest
from hypothesis import given, strategies as st
from pathlib import Path
import tempfile
import shutil

from proofstack.specgen import SpecGen


class MockSafetySpec:
    def __init__(self, invariants, guard, lemmas):
        self.invariants = invariants
        self.guard = guard
        self.lemmas = lemmas


class MockEnv:
    def __init__(self):
        self.observation_space = None
        self.action_space = None


class TestSpecGen:
    """Test suite for SpecGen with property-based testing."""

    def setup_method(self):
        """Set up test fixtures."""
        self.temp_dir = tempfile.mkdtemp()
        self.env = MockEnv()

    def teardown_method(self):
        """Clean up test fixtures."""
        shutil.rmtree(self.temp_dir, ignore_errors=True)

    @given(
        invariants=st.lists(st.text(min_size=1, max_size=20), min_size=1, max_size=3),
        guards=st.lists(st.text(min_size=1, max_size=20), min_size=1, max_size=3),
        lemmas=st.lists(st.text(min_size=1, max_size=15), min_size=0, max_size=2),
    )
    def test_emit_lean_creates_valid_lean_file(self, invariants, guards, lemmas):
        """Property: emit_lean always creates a valid Lean file with expected content."""
        # Arrange
        spec = MockSafetySpec(invariants, guards, lemmas)
        specgen = SpecGen(self.env, spec)

        # Act
        lean_file_path = specgen.emit_lean()

        # Assert
        assert lean_file_path is not None
        assert Path(lean_file_path).exists()

        content = Path(lean_file_path).read_text(encoding="utf-8")
        assert "Safety Proof for RL Policy" in content
        assert "Generated by SafeRL ProofStack" in content
        assert "structure State" in content
        assert "structure Action" in content
        assert "theorem guard_preserves_safety" in content

    @given(invariant_count=st.integers(min_value=1, max_value=5))
    def test_lean_file_includes_all_invariants(self, invariant_count):
        """Property: Generated Lean file includes all specified invariants."""
        invariants = [f"invariant_{i}" for i in range(invariant_count)]
        spec = MockSafetySpec(invariants, ["guard_1"], [])
        specgen = SpecGen(self.env, spec)

        lean_file_path = specgen.emit_lean()
        content = Path(lean_file_path).read_text(encoding="utf-8")

        for i in range(invariant_count):
            assert f"invariant_{i}" in content

    @given(guard_count=st.integers(min_value=1, max_value=5))
    def test_lean_file_includes_all_guards(self, guard_count):
        """Property: Generated Lean file includes all specified guards."""
        guards = [f"guard_{i}" for i in range(guard_count)]
        spec = MockSafetySpec(["invariant_1"], guards, [])
        specgen = SpecGen(self.env, spec)

        lean_file_path = specgen.emit_lean()
        content = Path(lean_file_path).read_text(encoding="utf-8")

        for i in range(guard_count):
            assert f"guard_{i}" in content

    def test_emit_lean_with_empty_spec(self):
        """Test edge case: emit_lean with empty safety specification."""
        spec = MockSafetySpec([], [], [])
        specgen = SpecGen(self.env, spec)

        lean_file_path = specgen.emit_lean()

        assert lean_file_path is not None
        assert Path(lean_file_path).exists()

    def test_emit_lean_with_complex_spec(self):
        """Test edge case: emit_lean with complex safety specification."""
        spec = MockSafetySpec(
            invariants=["|σ.cart_position| ≤ 2.4", "|σ.pole_angle| ≤ 0.2095"],
            guard=[
                "|σ.cart_position| ≤ 2.3",
                "|σ.pole_angle| ≤ 0.2",
                "|a.force| ≤ 10.0",
            ],
            lemmas=["position_step_bound", "angle_step_preserved"],
        )
        specgen = SpecGen(self.env, spec)

        lean_file_path = specgen.emit_lean()

        assert lean_file_path is not None
        assert Path(lean_file_path).exists()

    def test_write_proof_updates_lean_file(self):
        """Test: write_proof updates the Lean file with the provided proof."""
        spec = MockSafetySpec(["inv1"], ["guard1"], [])
        specgen = SpecGen(self.env, spec)

        # First emit the Lean file
        lean_file_path = specgen.emit_lean()

        # Then write a proof
        test_proof = "simp [h_guard]"
        specgen.write_proof(test_proof)

        # Check that the proof was written
        content = Path(lean_file_path).read_text(encoding="utf-8")
        assert test_proof in content

    def test_write_proof_without_emit_lean_raises_error(self):
        """Test: write_proof raises error if emit_lean hasn't been called."""
        spec = MockSafetySpec(["inv1"], ["guard1"], [])
        specgen = SpecGen(self.env, spec)

        with pytest.raises(ValueError, match="Lean file not generated yet"):
            specgen.write_proof("test proof")

    def test_write_proof_without_sorry_in_content(self):
        """Test: write_proof handles case where no 'sorry' is found in content."""
        spec = MockSafetySpec(["inv1"], ["guard1"], [])
        specgen = SpecGen(self.env, spec)

        # First emit the Lean file
        lean_file_path = specgen.emit_lean()

        # Modify the file to remove 'sorry'
        content = Path(lean_file_path).read_text(encoding="utf-8")
        content = content.replace("  sorry", "  trivial")
        Path(lean_file_path).write_text(content, encoding="utf-8")

        # Try to write a proof - should handle gracefully
        specgen.write_proof("simp [h_guard]")

        # The file should still exist and be readable
        assert Path(lean_file_path).exists()

    @given(proof_content=st.text(min_size=1, max_size=50))
    def test_write_proof_handles_various_proofs(self, proof_content):
        """Property: write_proof handles various proof content."""
        spec = MockSafetySpec(["inv1"], ["guard1"], [])
        specgen = SpecGen(self.env, spec)

        lean_file_path = specgen.emit_lean()
        specgen.write_proof(proof_content)

        content = Path(lean_file_path).read_text(encoding="utf-8")
        # The proof should be in the content - check for the proof content or its escaped version
        # The write_proof method replaces "sorry" with the actual proof
        assert "sorry" not in content or proof_content in content

    def test_lean_file_has_valid_syntax(self):
        """Test: Generated Lean file has valid Lean4 syntax structure."""
        spec = MockSafetySpec(
            invariants=["|σ.cart_position| ≤ 2.4"],
            guard=["|σ.cart_position| ≤ 2.3"],
            lemmas=[],
        )
        specgen = SpecGen(self.env, spec)

        lean_file_path = specgen.emit_lean()
        content = Path(lean_file_path).read_text(encoding="utf-8")

        # Check for essential Lean4 syntax elements
        assert "import" in content
        assert "structure" in content
        assert "def" in content
        assert "theorem" in content
        assert "by" in content
        assert "sorry" in content  # Placeholder proof
