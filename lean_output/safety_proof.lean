-- Safety Proof for RL Policy
-- Generated by SafeRL ProofStack

import Mathlib.Data.Real.Basic
import Mathlib.Data.Real.Sqrt

-- State and Action structures
structure State where
  cart_position : Real
  cart_velocity : Real
  pole_angle : Real
  pole_angular_velocity : Real

structure Action where
  force : Real

-- Constants
constant max_position : Real := 2.4
constant max_angle : Real := 0.2095  -- ~12 degrees in radians

-- Safety predicate
def safe (σ : State) : Prop :=
  |σ.cart_position| ≤ max_position ∧ |σ.pole_angle| ≤ max_angle

-- Guard predicate
def guard (σ : State) (a : Action) : Prop :=
  |σ.cart_position| ≤ max_position - 0.1 ∧ 
  |σ.pole_angle| ≤ max_angle - 0.01 ∧
  |a.force| ≤ 10.0

-- Step function (simplified dynamics)
def step (σ : State) (a : Action) : State :=
  { cart_position := σ.cart_position + σ.cart_velocity * 0.02,
    cart_velocity := σ.cart_velocity + a.force * 0.02,
    pole_angle := σ.pole_angle + σ.pole_angular_velocity * 0.02,
    pole_angular_velocity := σ.pole_angular_velocity + 9.8 * σ.pole_angle * 0.02 }

-- Main safety theorem
theorem guard_preserves_safety
  (σ : State) (a : Action)
  (h_guard : guard σ a) : safe (step σ a) := by
  -- Proof will be filled by the prover
  simp [h_guard]  -- mock proof

-- Additional lemmas for invariants

lemma invariant_0 (σ : State) : |σ.cart_position| ≤ 2.4 := by
  simp [h_guard]  -- mock proof

lemma invariant_1 (σ : State) : |σ.pole_angle| ≤ 0.2095 := by
  simp [h_guard]  -- mock proof

lemma guard_0 (σ : State) (a : Action) : |σ.cart_position| ≤ 2.3 := by
  simp [h_guard]  -- mock proof

lemma guard_1 (σ : State) (a : Action) : |σ.pole_angle| ≤ 0.2 := by
  simp [h_guard]  -- mock proof

lemma guard_2 (σ : State) (a : Action) : |a.force| ≤ 10.0 := by
  simp [h_guard]  -- mock proof
